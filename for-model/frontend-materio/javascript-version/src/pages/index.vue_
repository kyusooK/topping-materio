forEach: Model
fileName: Index.vue
path: for-model/frontend-materio/javascript-version/src/pages
---
<template>
  <v-app id="inspire">
        <v-col cols="10" style="margin: 0px; padding: 0px;">
            <v-main>
                <v-container v-if="urlPath" style="max-width:100vw !important;" class="py-8 px-6 mt-10" fluid>
                    <router-view></router-view>
                </v-container>
                <v-container v-else class="py-8 px-6 mt-10" fluid>
                    <v-row>
                        <v-card
                            v-for="(card, index) in cards"
                            :key="index"
                            class="mx-auto"
                            style="height:300px; width:300px; margin-bottom:20px;"
                            outlined
                        >
                            <v-list-item>
                                    <v-icon style="margin-top: 30%; margin-left: 37.5%;" color="primary" size="64">mdi-apps</v-icon>
                            </v-list-item>
                            
                            <v-card-actions>
                            <v-tooltip bottom>
                                <template v-slot:activator="{ on }">
                                    <v-btn
                                        v-on="on"
                                        class="mx-auto"
                                        outlined
                                        rounded
                                        :to="card.link"
                                        @click="changeUrl()"
                                        style="font-weight:500; font-size:20px; border:solid 2px; max-width:250px; overflow:hidden; margin-top: 10%;"
                                    >
                                        \{{ card.text }}
                                    </v-btn>
                                </template>
                                <span>\{{ card.text }}</span>
                            </v-tooltip>
                            </v-card-actions>
                        </v-card>
                    </v-row>
                </v-container>
            </v-main>
        </v-col>
    </v-app>
</template>

<script>
import { ref, onMounted, computed } from 'vue';

export default {
  name: 'App',
  data: () => ({
    useComponent: "",
    drawer: true,
    components: {},
    sideBar: true,
    urlPath: null,
    menus: [
            {{#boundedContexts}}
            { id: '{{nameCamelCase}}', title: '{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}',
                items: [
                    {{#aggregates}}
                    { key: '{{namePlural}}', url: '/{{namePlural}}', name: '{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}' },
                    {{/aggregates}}
                ]
            },
            {{/boundedContexts}}
        ],
        cards: [
           {{#boundedContexts}}
            {{#aggregates}}
            {
                text: "{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}",
                link: "/{{namePlural}}",
            },
            {{/aggregates}}
            {{/boundedContexts}}
        ],
    activeMenu: null,
  }),

  async created() {
    var path = document.location.href.split("#/")
    this.urlPath = path[1];
    },

  mounted() {
    var me = this;
    me.components = this.$ManagerLists;
  },
  computed: {
      activeMenuItems() {
        const activeMenu = this.menus.find(menu => menu.id === this.activeMenu);
        return activeMenu ? activeMenu.items : [];
      }
  },
  methods: {
    changeMenu(menuId) {
      this.activeMenu = this.activeMenu === menuId ? null : menuId;
    },
    changePath(event) {
      let targetUrl = event.currentTarget.getAttribute('data-to');
      this.$router.push(targetUrl);
    },
    openSideBar(){
      this.sideBar = !this.sideBar
    },
    changeUrl() {
      var path = document.location.href.split("#/")
      this.urlPath = path[1];
    },
    goHome() {
      this.urlPath = null;
    },
  }
};

</script>
<function>
window.$HandleBars.registerHelper('ifNotNull', function (displayName, name) {
    if(displayName){
        return displayName;
    }else{
        return name;
    }
})
</function>